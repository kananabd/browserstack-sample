"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerRepository = void 0;
const dynamodbbase_1 = require("./dynamodbbase");
const customermodel_1 = require("./models/customermodel");
class CustomerRepository extends dynamodbbase_1.DynamoDbBase {
    /**
     * Returns customer by given identifier
     * @param {string} customerId - an unique customer identifier
     * @returns {Promise<Customer>} - promised object to get customer
     */
    async getCustomer(customerId) {
        const res = await this.getItem("Customer", "customerId", customerId);
        if (Object.keys(res).length === 0 || !res.Item || Object.keys(res.Item).length === 0 || res.Item["deleted"]) {
            return null;
        }
        else {
            return customermodel_1.Customer.bind(res.Item);
        }
    }
    /**
     * Get customers
     * @param customerIds - identifiers of customers, if empty all records will be returned
     */
    async getAllCustomers(customerIds = []) {
        const returnArray = [];
        const res = await this.getItems("Customer", "customerId", customerIds, true, false);
        if (res.length === 0) {
            return [];
        }
        for (const item of res) {
            if (!item["deleted"]) {
                returnArray.push(customermodel_1.Customer.bind(item));
            }
        }
        return returnArray;
    }
    /**
     * Returns customer by sfo guid key
     * @param userId - user identifier
     */
    async getCustomerBySfoGuidKey(sfoGuidKey) {
        let items = await this.getItemsByQuery("Customer", "sfoGuidKey-index", "sfoGuidKey = :sfoGuidKey", {
            ":sfoGuidKey": sfoGuidKey.toLowerCase()
        });
        items = items.filter(i => !i["deleted"]);
        if (!items.length) {
            return null;
        }
        return customermodel_1.Customer.bind(items[0]);
    }
    /**
     * Returns customer by client code
     * @param clientCode - client code
     */
    async getCustomerByClientCode(clientCode) {
        let items = await this.getItemsByQuery("Customer", "cClientCode-index", "#clientCode = :clientCode", { ":clientCode": clientCode.toLowerCase() }, { "#clientCode": "cClientCode" });
        items = items.filter(i => !i["deleted"]);
        if (!items.length) {
            return null;
        }
        return customermodel_1.Customer.bind(items[0]);
    }
    /**
     * Updates the customer
     * @param customer
     * @returns {Promise<void>}
     */
    updateCustomer(customer) {
        return this.putItem("Customer", customer);
    }
    /**
     * Returns customer by name
     * @param name - customer name
     */
    async getCustomerByName(name) {
        let items = await this.getItemsByQuery("Customer", "cName-index", "#name = :customerName", { ":customerName": name.toLowerCase() }, { "#name": "cName" });
        items = items.filter(i => !i["deleted"]);
        if (!items.length) {
            return null;
        }
        return customermodel_1.Customer.bind(items[0]);
    }
}
exports.CustomerRepository = CustomerRepository;
