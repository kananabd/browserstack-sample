"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encrypt = void 0;
const client_kms_1 = require("@aws-sdk/client-kms");
/**
 * Functions to work with encryption using AWS KMS services
 *
 * @export
 * @class Encrypt
 */
class Encrypt {
    constructor() {
        this.ENCRYPT_KEY_ID = process.env.ENCRYPT_KEY_ID;
        this._kms = new client_kms_1.KMSClient();
    }
    /**
     * Return instance of the Encrypt class
     */
    static getInstance() {
        if (!this.instance) {
            this.instance = new Encrypt();
        }
        return this.instance;
    }
    /**
     * Encrypt data
     * @param data to encrypt
     */
    async encrypt(data) {
        if (!data) {
            return "";
        }
        const params = {
            KeyId: this.ENCRYPT_KEY_ID,
            Plaintext: Buffer.from(data, "utf-8")
        };
        const command = new client_kms_1.EncryptCommand(params);
        const encryptedData = await this._kms.send(command);
        if (!encryptedData.CiphertextBlob) {
            throw new Error("The encrypt failed");
        }
        return Buffer.from(encryptedData.CiphertextBlob).toString("base64");
    }
    /**
     * Decrypt data
     * @param data in the base64 format to decrypt
     */
    async decrypt(encdata) {
        if (!encdata) {
            return "";
        }
        const params = {
            CiphertextBlob: Buffer.from(encdata, "base64")
        };
        const command = new client_kms_1.DecryptCommand(params);
        const encryptedData = await this._kms.send(command);
        if (!encryptedData.Plaintext) {
            throw new Error("The decrypt is failed");
        }
        return new TextDecoder("utf-8").decode(encryptedData.Plaintext);
    }
}
exports.Encrypt = Encrypt;
