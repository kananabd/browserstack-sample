import { BatchWriteItemInput } from "@aws-sdk/client-dynamodb";
import { DeleteCommandOutput, ScanCommandInput, PutCommandOutput, GetCommandOutput } from "@aws-sdk/lib-dynamodb";
/**
 * Base methods to work with the DynamoDB
 *
 * @export
 * @class DBConnection
 */
export declare class DynamoDbBase {
    private readonly ddb;
    private readonly docClient;
    private tablePrefix;
    constructor();
    /**
     * Returns exact one item from DB.
     *
     * @param {string} tableName - Name of DynamoDB table (with no prefix).
     * @param {string} keyName - name of hash key in the table.
     * @param {string} keyValue - value of the hash key.
     * @param {string} sortKeyName - name of the sort key.
     * @param {string} sortKeyValue - value of the sort key.
     * @param {boolean} useTablePrefix - table prefix flag.
     * @returns {Promise<GetCommandOutput>}
     */
    protected getItem(tableName: string, keyName: string, keyValue: string, sortKeyName?: string, sortKeyValue?: string, useTablePrefix?: boolean): Promise<GetCommandOutput>;
    /**
     * Returns items from DB.
     * @param {string} tableName - Name of DynamoDB table (with no prefix).
     * @param {string} keyName - name of hash key in the table.
     * @param {string[]} keyValues - values of the hash key.
     * @param {boolean} useTablePrefix - table prefix flag.
     * @returns {Promise<Record<string, any>>[]>}
     */
    protected getItems(tableName: string, keyName: string, keyValues: string[], useTablePrefix?: boolean, useBackoff?: boolean): Promise<Record<string, any>[]>;
    /**
     * Returns items from DB.
     * @param {string} tableName - Name of DynamoDB table (with no prefix).
     * @param {string} indexName - name of the index in the table.
     * @param {string} keyExpression - query key expression.
     * @param {Record<string, any>} expressionValues - query expression attribute value.
     * @param {Record<string, string>} expressionAttributeNameMap - query expression attribute name.
     * @param {boolean} useTablePrefix - table prefix flag.
     * @returns {Promise<Record<string, any>[]>}
     */
    protected getItemsByQuery(tableName: string, indexName?: string, keyExpression?: string, expressionValues?: Record<string, any>, expressionAttributeNameMap?: Record<string, string>, useTablePrefix?: boolean, useBackoff?: boolean, scanIndexForward?: boolean): Promise<Record<string, any>[]>;
    /**
     * Returns all items from DB.
     * @param tableName - Name of DynamoDB table (with no prefix).
     * @param {boolean} useTablePrefix - table prefix flag.
     * @param {boolean} useBackoff - give it some time to recover capacity units
     * @param {ScanInput} scanInput - allow to scan table with parameters
     * @returns {<Record<string, any>[]>}
     */
    protected getAllItems(tableName: string, useTablePrefix?: boolean, useBackoff?: boolean, scanInput?: Partial<ScanCommandInput>): Promise<Record<string, any>[]>;
    /**
     * Insert item into DB.
     *
     * @param {string} tableName - Name of DynamoDB table (with no prefix).
     * @param {*} row - schemaless representation of data
     * @param {string} keyName - name of hash key in the table.
     * @param {string} keyValue - value of the hash key.
     * @param {string} sortKeyName - name of the sort key.
     * @param {string} sortKeyValue - value of the sort key.
     * @param {boolean} useTablePrefix - table prefix flag.
     * @returns {Promise<PutCommandOutput>} - a promised object to insert data into DB
     */
    protected putItem(tableName: string, row: any, keyName?: string, keyValue?: string, sortKeyName?: string, sortKeyValue?: string, useTablePrefix?: boolean): Promise<PutCommandOutput>;
    /**
     * Update item.
     *
     * @param tableName Name of DynamoDB table (with no prefix).
     * @param key Key of the entity.
     * @param updateExpression update expression.
     * @param attrValues expression attribute value map.
     * @param conditionExp condition expression.
     * @param attrNames expression attribute name map.
     * @param {boolean} useTablePrefix - table prefix flag.
     */
    protected updateItem(tableName: string, key: Record<string, any>, updateExpression: string, attrValues: Record<string, any>, conditionExp?: string, attrNames?: Record<string, string>, useTablePrefix?: boolean): Promise<void>;
    /**
     * Deletes item from DB.
     *
     * @param {string} tableName - Name of DynamoDB table (with no prefix).
     * @param {string} keyName - name of hash key in the table.
     * @param {string} keyValue - value of the hash key.
     * @param {string} sortKeyName - name of the sort key.
     * @param {string} sortKeyValue - value of the sort key.
     * @param {boolean} useTablePrefix - table prefix flag.
     * @returns {Promise<DeleteCommandOutput>} - a promised object to insert data into DB
     */
    protected deleteItem(tableName: string, keyName: string, keyValue: string, sortKeyName?: string, sortKeyValue?: string, useTablePrefix?: boolean): Promise<DeleteCommandOutput>;
    /**
     * Process one batch from and adds (or updates) data in DB
     *
     * @private
     * @param {BatchWriteItemInput} batch
     * @returns {Promise<void>}
     */
    protected batchInsert(batch: BatchWriteItemInput, useBackoff?: boolean): Promise<void>;
    /**
     * Waits for capacity recovering based on the amount of time we are hitting the limit
     * see https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/ for details
     *
     * @private
     * @param {number} retryCount - number of collisions happened before. This value increases the overall delay for better AWS capacity handling
     * @returns void
     */
    private waitForTableCapacity;
    private customBackoff;
}
