/**
 * Service to work with the AWS SNS service.
 */
export declare class SNSService {
    private readonly _sns;
    /**
     * Retrieves a new platform endpoint for the given device token
     * @param userId user Id
     * @param deviceToken user device id (token for iOS and regId for Android)
     * @param isDevelopment promised endpointARN
     * @param platformApplication platform application name for SNS service
     */
    createEndpointARN(userId: string, deviceToken: string, isDevelopment: boolean, platformApplication: string): Promise<string>;
    /**
     * deletes the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    deleteEndpointARN(endpointArn: string): Promise<void>;
    /**
     * Gets attributes of the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    getEndpointAttributes(endpointArn: string): Promise<Record<string, string> | null>;
    /**
     * Sets attributes of the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    setEndpointAttributes(endpointArn: string, enabled: boolean, deviceToken: string, userData: string): Promise<void>;
    /**
     * Published message to the endpoint
     * @param message message text
     * @param endpointArn endpoint Arn
     * @param isEndpointATopic use TopicArn or TargetArn
     */
    publishMessage(message: string, endpointArn: string, isEndpointATopic?: boolean): Promise<string | undefined>;
    /**
     * Sends SMS message for a specific number
     * @param number mobile number
     * @param message message text
     */
    sendSMS(number: string, message: string): Promise<void>;
    /**
     * Returns ARN based on device token and isDevelopment flag
     *
     * @param deviceToken - device token which used to determine platform (Apple or Google)
     * @param platformApplication platform application name for SNS service
     * @param isDevelopment - indicates that the device can receive notifications in developer mode
     */
    private getApplicationARN;
}
