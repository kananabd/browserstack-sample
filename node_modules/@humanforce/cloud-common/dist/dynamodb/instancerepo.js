"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceRepository = void 0;
const invalidateapigatewayinstancecache_1 = require("../decorators/invalidateapigatewayinstancecache");
const dynamodbbase_1 = require("./dynamodbbase");
const systeminstancemodel_1 = require("./models/systeminstancemodel");
class InstanceRepository extends dynamodbbase_1.DynamoDbBase {
    async getAllSystemInstances(instanceIds = []) {
        const result = [];
        const res = await this.getItems("SystemInstance", "instanceId", instanceIds, true, false);
        if (res.length === 0) {
            return [];
        }
        for (const item of res) {
            if (!item["deleted"]) {
                result.push(systeminstancemodel_1.SystemInstance.bind(item));
            }
        }
        return result;
    }
    /**
     * Updates the instance
     * @param {SystemInstance} instance
     * @returns {Promise<void>}
     */
    async updateSystemInstance(instance) {
        await this.putItem("SystemInstance", instance);
    }
    /**
     * Updates the instance maintenance flag
     * @param {string} instanceId
     * @param {boolean} flagValue
     * @returns {Promise<void>}
     */
    async updateMaintenanceFlag(instanceId, flagValue) {
        const tableKey = {
            instanceId
        };
        const updateExpression = `set isMaintenance = :val`;
        const expAttributeValues = {
            ":val": flagValue
        };
        let conditionExp;
        if (flagValue) {
            conditionExp = "isMaintenance = :conditionVal";
            expAttributeValues[":conditionVal"] = false;
        }
        await this.updateItem("SystemInstance", tableKey, updateExpression, expAttributeValues, conditionExp);
    }
    /**
     * Returns instance by given identifier
     * @param {string} instanceId - an unique instance identifier (same as ClientGuid in Starfish)
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstance(instanceId) {
        const res = await this.getItem("SystemInstance", "instanceId", instanceId);
        if (Object.keys(res).length === 0 || !res.Item || Object.keys(res.Item).length === 0 || res.Item["deleted"]) {
            return null;
        }
        else {
            return systeminstancemodel_1.SystemInstance.bind(res.Item);
        }
    }
    /**
     * Returns instance by given apiToken
     * @param {string} apiToken - API token
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstanceByApiToken(apiToken) {
        let items = await this.getItemsByQuery("SystemInstance", "apiToken-index", "apiToken = :apiToken", {
            ":apiToken": apiToken
        });
        items = items.filter(i => !i["deleted"]);
        if (items.length > 1) {
            throw new Error("One or more instances have the same api token");
        }
        if (items.length) {
            return systeminstancemodel_1.SystemInstance.bind(items[0]);
        }
        return null;
    }
    /**
     * Returns instance by given endpointUrl
     *
     * @param {string} endpointUrl - instance endpoint URL
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstanceByEndpointUrl(endpointUrl) {
        let items = await this.getItemsByQuery("SystemInstance", "cEndpointUrl-index", "#endpointUrl = :endpointUrl", { ":endpointUrl": endpointUrl.toLowerCase() }, { "#endpointUrl": "cEndpointUrl" });
        items = items.filter(i => !i["deleted"]);
        if (items.length > 1) {
            throw new Error("One ore more instances have the same domain group");
        }
        if (items.length) {
            return systeminstancemodel_1.SystemInstance.bind(items[0]);
        }
        return null;
    }
    /**
     * Returns instance by given intelliUrl
     *
     * @param {string} intelliUrl - Intelli endpoint URL
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstanceByIntelliUrl(intelliUrl) {
        let items = await this.getItemsByQuery("SystemInstance", "cIntelliUrl-index", "#intelliUrl = :intelliUrl", { ":intelliUrl": intelliUrl.toLowerCase() }, { "#intelliUrl": "cIntelliUrl" });
        items = items.filter(i => !i["deleted"]);
        if (items.length > 1) {
            throw new Error("One ore more instances have the same Intelli Url");
        }
        if (items.length) {
            return systeminstancemodel_1.SystemInstance.bind(items[0]);
        }
        return null;
    }
    /**
     * Returns instances by name
     * @param name - instance name
     */
    async getSystemInstancesByName(instanceName) {
        const result = [];
        // the "name" attribute is a reserved keyword it is why we need rename it the keyExpression
        const items = await this.getItemsByQuery("SystemInstance", "cName-index", "#name = :instanceName", { ":instanceName": instanceName.toLowerCase() }, { "#name": "cName" });
        for (const item of items) {
            if (!item["deleted"]) {
                result.push(systeminstancemodel_1.SystemInstance.bind(item));
            }
        }
        return result;
    }
    /**
     * Returns instance by given domainUserGroup
     *
     * @param {string} domainUserGroup - instance domain user group
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstanceByDomainUserGroup(domainUserGroup) {
        const result = [];
        const items = await this.getItemsByQuery("SystemInstance", "cDomainUserGroup-index", "#domainUserGroup = :domainUserGroup", { ":domainUserGroup": domainUserGroup.toLowerCase() }, { "#domainUserGroup": "cDomainUserGroup" });
        for (const item of items) {
            if (!item["deleted"]) {
                result.push(systeminstancemodel_1.SystemInstance.bind(item));
            }
        }
        return result;
    }
    /**
     * Returns instance by given customerId
     *
     * @param {string} customerId - customer Id
     * @returns {Promise<SystemInstance>} - promised object to get instance
     */
    async getSystemInstanceByCustomerId(customerId) {
        const result = [];
        const items = await this.getItemsByQuery("SystemInstance", "customerId-index", "customerId = :customerId", {
            ":customerId": customerId
        });
        for (const item of items) {
            if (!item["deleted"]) {
                result.push(systeminstancemodel_1.SystemInstance.bind(item));
            }
        }
        return result;
    }
}
exports.InstanceRepository = InstanceRepository;
__decorate([
    (0, invalidateapigatewayinstancecache_1.InvalidateAPIGatewayInstanceCache)()
], InstanceRepository.prototype, "updateSystemInstance", null);
