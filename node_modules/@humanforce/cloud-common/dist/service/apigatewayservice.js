"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayService = void 0;
const __1 = require("..");
const https_1 = __importDefault(require("https"));
/**
 * Service to work with AWS APi Gateway service service
 */
// make GET request with Cache-Control header to invalidate API Gateway Cache
class ApiGatewayService {
    invalidateCacheByKey(endpoint, key) {
        return new Promise((resolve, reject) => {
            try {
                const mtoken = process.env.MULTI_TENANT_TOKEN;
                if (!mtoken) {
                    resolve();
                    return;
                }
                console.log(`The cache will be invalidated with key: ${key}`);
                const domain = this.getHostedZone().domain;
                if (!domain) {
                    resolve();
                    return;
                }
                const uri = `${__1.CommonConstants.HttpsPrefix}cmcapi.${domain}/${endpoint}/${key}`;
                https_1.default.get(uri, {
                    headers: {
                        "Cache-Control": "max-age=0",
                        "multitenanttoken": mtoken
                    }
                }, (resp) => {
                    let data = "";
                    resp.on("data", (chunk) => {
                        data += chunk;
                    });
                    resp.on("end", () => {
                        const result = JSON.parse(data);
                        if (!result.success) {
                            console.log(`Cache invalidation failed\n ${result.message}`);
                        }
                        else {
                            console.log(`The cache was invalidated with key: ${key}`);
                        }
                    });
                    resolve();
                });
            }
            catch (error) {
                console.error(`Cache invalidation failed\n ${error}`);
                reject(error);
            }
        });
    }
    /**
     * Returns hosted zone
     */
    getHostedZone() {
        if (!process.env.HOSTED_ZONE_ID) {
            console.log("No HostedZoneId specified. Please check env variables.");
        }
        if (!process.env.HOSTED_ZONE_DOMAIN) {
            console.log("No HostedZoneDomain specified. Please check env variables.");
        }
        return {
            zoneId: process.env.HOSTED_ZONE_ID,
            domain: process.env.HOSTED_ZONE_DOMAIN
        };
    }
}
exports.ApiGatewayService = ApiGatewayService;
