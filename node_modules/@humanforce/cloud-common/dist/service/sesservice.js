"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SESService = void 0;
const client_ses_1 = require("@aws-sdk/client-ses");
const commonsettings_1 = require("../commonsettings");
const logger_1 = require("../utils/logger");
class SESService {
    constructor() {
        this._ses = new client_ses_1.SESClient({
            region: commonsettings_1.CommonSettings.getAWSRegionForSES()
        });
    }
    /**
     * This method send an email.
     * @param addressesTo - email recipient(s)
     * @param subject - email subject
     * @param message - email body
     * @param isHtml - if it is true then message will be sent as html message, otherwise as plain text
     */
    async sendEmail(addressesTo, subject, message, isHtml = false, addressesCc, emailSender) {
        const t1 = process.hrtime();
        const request = {
            Destination: {
                ToAddresses: !Array.isArray(addressesTo) ? [addressesTo] : addressesTo
            },
            Message: {
                Body: {},
                Subject: {
                    Data: subject
                }
            },
            Source: this.getSenderSource(emailSender)
        };
        if (addressesCc) {
            request.Destination.CcAddresses = !Array.isArray(addressesCc) ? [addressesCc] : addressesCc;
        }
        if (isHtml) {
            request.Message.Body.Html = {
                Data: message
            };
        }
        else {
            request.Message.Body.Text = {
                Data: message
            };
        }
        const command = new client_ses_1.SendEmailCommand(request);
        await this._ses.send(command);
        const t2 = process.hrtime(t1);
        logger_1.Logger.traceMessage("Send \"%s\" email to %s, %ds %sms", subject, addressesTo, t2[0], (t2[1] / 1000000).toFixed(2));
    }
    /**
   * This method send an templated email.
   * @param addressesTo - email recipient(s)
   * @param templateName - name of template uploaded to SES
   * @param templateData - data for template as key-value pairs of string
   */
    async sendTemplatedEmail(addressesTo, templateName, templateData, addressesCc, emailSender) {
        const request = {
            Source: this.getSenderSource(emailSender),
            Destination: {
                ToAddresses: !Array.isArray(addressesTo) ? [addressesTo] : addressesTo
            },
            Template: templateName,
            TemplateData: JSON.stringify(templateData)
        };
        if (addressesCc) {
            request.Destination.CcAddresses = !Array.isArray(addressesCc) ? [addressesCc] : addressesCc;
        }
        const command = new client_ses_1.SendTemplatedEmailCommand(request);
        await this._ses.send(command);
    }
    getSenderSource(emailSender) {
        const emailSenderAddress = emailSender || process.env.EMAIL_SENDER;
        const emailSenderPrefix = process.env.EMAIL_SENDER_PREFIX;
        if (emailSenderPrefix) {
            return `${emailSenderPrefix} <${emailSenderAddress}>`;
        }
        return emailSenderAddress;
    }
}
exports.SESService = SESService;
