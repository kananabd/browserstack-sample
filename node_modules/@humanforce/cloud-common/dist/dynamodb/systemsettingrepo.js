"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemSettingRepository = void 0;
const dynamodbbase_1 = require("./dynamodbbase");
const systemsettingmodel_1 = require("./models/systemsettingmodel");
class SystemSettingRepository extends dynamodbbase_1.DynamoDbBase {
    /**
     * Returns the system setting
     * @param {string} name - name of system setting (identifier)
     * @returns {Promise<SystemSetting>} - promised object to get SystemSettings
     */
    async getSystemSetting(name) {
        const systemSetting = await this.getSystemSettingObj(name);
        return systemSetting?.getString();
    }
    /**
     * Returns the system setting
     * @param {string} name - name of system setting (identifier)
     * @returns {Promise<SystemSetting>} - promised object to get SystemSettings
     */
    async getSystemSettingObject(name) {
        const systemSetting = await this.getSystemSettingObj(name);
        return systemSetting;
    }
    /**
     * Updates value of the system setting
     * @param {string} name - name of system setting (identifier)
     * @param {object} value - value of system setting
     * @returns {Promise<void>}
     */
    async updateSystemSetting(name, value) {
        const systemSetting = await this.getSystemSettingObj(name);
        if (!systemSetting) {
            throw new Error(`The system setting is not found by name "${name}" `);
        }
        systemSetting.setValue(value);
        return this.putItem("SystemSettings", systemSetting);
    }
    async getSystemSettingObj(name) {
        const res = await this.getItem("SystemSettings", "name", name);
        if (Object.keys(res).length === 0 || !res.Item || Object.keys(res.Item).length === 0 || res.Item["deleted"]) {
            return undefined;
        }
        else {
            return new systemsettingmodel_1.SystemSetting(res.Item.name, res.Item.value);
        }
    }
}
exports.SystemSettingRepository = SystemSettingRepository;
