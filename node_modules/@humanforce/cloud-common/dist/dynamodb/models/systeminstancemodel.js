"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemInstance = void 0;
const encrypt_1 = require("../../utils/encrypt");
const helpers_1 = require("../../utils/helpers");
const model_1 = require("./model");
class SystemInstance {
    constructor(instanceId, name, type, customerId, endpointUrl, requestedDate) {
        this.alertsEnabled = false;
        this.exeEnabled = false;
        this.deleted = false;
        this.isMaintenance = false;
        this.autoUpgrade = true;
        this.minLogLevel = model_1.InstanceLoglevel.INFO;
        this.exeMinLogLevel = model_1.InstanceLoglevel.INFO;
        this.instanceId = instanceId;
        this.setName(name);
        this.instanceType = type;
        this.customerId = customerId;
        this.setEndpointUrl(endpointUrl);
        this.requestedDate = requestedDate === undefined ? helpers_1.Helpers.getCurrentEpochTime() : requestedDate;
    }
    static bind(attributes) {
        const url = attributes["cEndpointUrl"];
        const instanceType = attributes["instanceType"] === undefined
            ? (attributes["dbConnectionString"]
                ? model_1.InstanceType.HFCloud
                : (url.endsWith(process.env.HOSTED_ZONE_DOMAIN) ? model_1.InstanceType.Hosted : model_1.InstanceType.OnPrem))
            : attributes["instanceType"];
        const obj = new SystemInstance(attributes["instanceId"], attributes["name"], instanceType, attributes["customerId"], attributes["endpointUrl"], attributes["requestedDate"]);
        obj.status = attributes["status"];
        obj.registeredSince = attributes["registeredSince"];
        obj.apiToken = attributes["apiToken"];
        obj.emailToNotify = attributes["emailToNotify"];
        obj.faceCollectionId = attributes["faceCollectionId"];
        obj.currentVersion = attributes["currentVersion"];
        obj.licenceInfo = attributes["licenceInfo"];
        obj.alertsEnabled = !!attributes["alertsEnabled"];
        obj.alertsCheckFrequency = attributes["alertsCheckFrequency"];
        obj.exeEnabled = !!attributes["exeEnabled"];
        obj.setDomainUserGroup(attributes["domainUserGroup"]);
        obj.exe64users = attributes["exe64users"];
        obj.environmentName = attributes["environmentName"];
        obj.upgradeFailed = attributes["upgradeFailed"];
        obj.isMaintenance = !!attributes["isMaintenance"];
        obj.autoUpgrade = attributes["autoUpgrade"] === undefined ? true : attributes["autoUpgrade"];
        obj.dbConnectionString = attributes["dbConnectionString"];
        obj.cryptoPassword = attributes["cryptoPassword"];
        obj.minLogLevel = attributes["minLogLevel"] === undefined ? model_1.InstanceLoglevel.INFO : attributes["minLogLevel"];
        obj.dbCommandTimeout = attributes["dbCommandTimeout"];
        obj.exeDbCommandTimeout = attributes["exeDbCommandTimeout"];
        obj.exeMinLogLevel = attributes["exeMinLogLevel"] === undefined ? model_1.InstanceLoglevel.INFO : attributes["exeMinLogLevel"];
        obj.features = attributes["features"];
        obj.isProduction = attributes["isProduction"];
        obj.installDate = attributes["installDate"];
        obj.setIntelliUrl(attributes["intelliUrl"]);
        return obj;
    }
    getCanonicalName() {
        return this.cName;
    }
    getName() {
        return this.name;
    }
    setName(name) {
        this.name = name;
        this.cName = name.toLowerCase();
    }
    getCanonicalEndpointUrl() {
        return this.cEndpointUrl;
    }
    getEndpointUrl() {
        return this.endpointUrl;
    }
    setEndpointUrl(endpointUrl) {
        this.endpointUrl = endpointUrl;
        this.cEndpointUrl = endpointUrl.toLowerCase();
    }
    getCanonicalIntelliUrl() {
        return this.cIntelliUrl;
    }
    getIntelliUrl() {
        return this.intelliUrl;
    }
    setIntelliUrl(intelliUrl) {
        this.intelliUrl = intelliUrl;
        this.cIntelliUrl = intelliUrl ? intelliUrl.toLowerCase() : undefined;
    }
    getCanonicalDomainUserGroup() {
        return this.cDomainUserGroup;
    }
    getDomainUserGroup() {
        return this.domainUserGroup;
    }
    setDomainUserGroup(domainUserGroup) {
        this.domainUserGroup = domainUserGroup;
        this.cDomainUserGroup = domainUserGroup ? domainUserGroup.toLowerCase() : undefined;
    }
    async getDbConnectionString() {
        if (!this.dbConnectionString) {
            return undefined;
        }
        return await encrypt_1.Encrypt.getInstance().decrypt(this.dbConnectionString);
    }
    async setDbConnectionString(dbConnectionString) {
        if (dbConnectionString) {
            this.dbConnectionString = await encrypt_1.Encrypt.getInstance().encrypt(dbConnectionString);
        }
        else {
            this.dbConnectionString = undefined;
        }
    }
    async getCryptoPassword() {
        if (!this.cryptoPassword) {
            return undefined;
        }
        return await encrypt_1.Encrypt.getInstance().decrypt(this.cryptoPassword);
    }
    async setCryptoPassword(cryptoPassword) {
        if (cryptoPassword) {
            this.cryptoPassword = await encrypt_1.Encrypt.getInstance().encrypt(cryptoPassword);
        }
        else {
            this.cryptoPassword = undefined;
        }
    }
    isCryptoPasswordSet() {
        return !!this.cryptoPassword;
    }
    isDbConnectionSet() {
        return !!this.dbConnectionString;
    }
    getInstanceTypeName() {
        let instanceTypeString = "";
        switch (this.instanceType) {
            case model_1.InstanceType.HFCloud:
                instanceTypeString = "HF Cloud";
                break;
            case model_1.InstanceType.OnPrem:
                instanceTypeString = "On-Prem";
                break;
            case model_1.InstanceType.Hosted:
                instanceTypeString = "Hosted";
                break;
            case model_1.InstanceType.HFCloudWfmOff:
                instanceTypeString = "HFCloudWfmOff";
                break;
            default:
                break;
        }
        return instanceTypeString;
    }
}
exports.SystemInstance = SystemInstance;
