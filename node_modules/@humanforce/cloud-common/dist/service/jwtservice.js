"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtService = void 0;
const commonsettings_1 = require("../commonsettings");
const helpers_1 = require("../utils/helpers");
const client_kms_1 = require("@aws-sdk/client-kms");
/**
 * Service to work with JWT
 */
class JwtService {
    constructor() {
        this.kms = new client_kms_1.KMSClient({ region: commonsettings_1.CommonSettings.getAWSRegion() });
        this.rkmGuid = "ffffffff-0001-0000-0000-000000000000";
        this.signingAlgorithm = "RSASSA_PKCS1_V1_5_SHA_256";
        this.signingAlgorithmHeader = "RS256";
    }
    async generateJwt(signingKeyId, instanceId, hfUserId, audience, issuer, sub = undefined, expirationTime = 1800) {
        const header = helpers_1.Helpers.base64UrlEncode(JSON.stringify({
            kid: signingKeyId,
            alg: this.signingAlgorithmHeader
        }));
        const nowUtcTime = helpers_1.Helpers.getCurrentEpochTime();
        const payload = helpers_1.Helpers.base64UrlEncode(JSON.stringify({
            iat: nowUtcTime,
            exp: nowUtcTime + expirationTime,
            iss: issuer,
            aud: audience,
            sub: sub ?? this.rkmGuid,
            "custom:instanceId": instanceId,
            "custom:hfUserId": hfUserId !== "" ? hfUserId : this.rkmGuid
        }));
        const message = Buffer.from(`${header}.${payload}`);
        const signRequest = {
            KeyId: signingKeyId,
            Message: message,
            MessageType: "RAW",
            SigningAlgorithm: this.signingAlgorithm
        };
        const signCommand = new client_kms_1.SignCommand(signRequest);
        let signatureArray;
        try {
            const response = await this.kms.send(signCommand);
            signatureArray = response.Signature;
        }
        catch (error) {
            console.error(`Signature generating failed\n ${error}`);
            throw new Error("Signature generation failed");
        }
        const signature = helpers_1.Helpers.base64UrlEncode(signatureArray);
        return `${header}.${payload}.${signature}`;
    }
    async validateJwt(message, signature, signingKeyId) {
        const verifyRequest = {
            KeyId: signingKeyId,
            Message: message,
            MessageType: "RAW",
            Signature: signature,
            SigningAlgorithm: this.signingAlgorithm
        };
        const verifyCommand = new client_kms_1.VerifyCommand(verifyRequest);
        let isSignValid = false;
        try {
            const response = await this.kms.send(verifyCommand);
            isSignValid = response.SignatureValid || false;
        }
        catch (ex) {
            if (!(ex instanceof client_kms_1.KMSInvalidSignatureException)) {
                throw ex;
            }
        }
        return isSignValid;
    }
}
exports.JwtService = JwtService;
