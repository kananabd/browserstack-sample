"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SNSService = void 0;
const client_sns_1 = require("@aws-sdk/client-sns");
const commonsettings_1 = require("../commonsettings");
const helpers_1 = require("../utils/helpers");
/**
 * Service to work with the AWS SNS service.
 */
class SNSService {
    constructor() {
        this._sns = new client_sns_1.SNSClient({
            region: commonsettings_1.CommonSettings.getAWSRegion()
        });
    }
    /**
     * Retrieves a new platform endpoint for the given device token
     * @param userId user Id
     * @param deviceToken user device id (token for iOS and regId for Android)
     * @param isDevelopment promised endpointARN
     * @param platformApplication platform application name for SNS service
     */
    async createEndpointARN(userId, deviceToken, isDevelopment, platformApplication) {
        const command = new client_sns_1.CreatePlatformEndpointCommand({
            PlatformApplicationArn: this.getApplicationARN(deviceToken, platformApplication, isDevelopment),
            Token: deviceToken,
            CustomUserData: userId
        });
        const res = await this._sns.send(command);
        if (!res.EndpointArn) {
            throw new Error("The EndpointARN has not been created");
        }
        return res.EndpointArn;
    }
    /**
     * deletes the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    async deleteEndpointARN(endpointArn) {
        const command = new client_sns_1.DeleteEndpointCommand({
            EndpointArn: endpointArn
        });
        await this._sns.send(command);
    }
    /**
     * Gets attributes of the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    async getEndpointAttributes(endpointArn) {
        const command = new client_sns_1.GetEndpointAttributesCommand({
            EndpointArn: endpointArn
        });
        const res = await this._sns.send(command);
        return res.Attributes || null;
    }
    /**
     * Sets attributes of the existing endpoint
     * @param endpointArn - user existing endpoint
     */
    async setEndpointAttributes(endpointArn, enabled, deviceToken, userData) {
        const command = new client_sns_1.SetEndpointAttributesCommand({
            EndpointArn: endpointArn,
            Attributes: {
                CustomUserData: userData,
                Enabled: String(enabled),
                Token: deviceToken
            }
        });
        await this._sns.send(command);
    }
    /**
     * Published message to the endpoint
     * @param message message text
     * @param endpointArn endpoint Arn
     * @param isEndpointATopic use TopicArn or TargetArn
     */
    async publishMessage(message, endpointArn, isEndpointATopic = false) {
        const inp = {
            Message: message,
            MessageStructure: "json"
        };
        if (isEndpointATopic) {
            inp.TopicArn = endpointArn;
        }
        else {
            inp.TargetArn = endpointArn;
        }
        const command = new client_sns_1.PublishCommand(inp);
        const res = await this._sns.send(command);
        return res.MessageId;
    }
    /**
     * Sends SMS message for a specific number
     * @param number mobile number
     * @param message message text
     */
    async sendSMS(number, message) {
        // Send sms code and save it to the session
        const smsParams = {
            PhoneNumber: number,
            Message: message,
            MessageAttributes: {
                "AWS.SNS.SMS.SenderID": {
                    "DataType": "String",
                    "StringValue": "Humanforce"
                },
                "AWS.SNS.SMS.SMSType": {
                    "DataType": "String",
                    "StringValue": "Transactional"
                },
                "AWS.SNS.SMS.MaxPrice": {
                    "DataType": "Number",
                    "StringValue": "10.00"
                }
            }
        };
        const command = new client_sns_1.PublishCommand(smsParams);
        await this._sns.send(command);
    }
    /**
     * Returns ARN based on device token and isDevelopment flag
     *
     * @param deviceToken - device token which used to determine platform (Apple or Google)
     * @param platformApplication platform application name for SNS service
     * @param isDevelopment - indicates that the device can receive notifications in developer mode
     */
    getApplicationARN(deviceToken, platfomApplication, isDevelopment) {
        let arn;
        // Apple or AppleDev or Google?
        if (deviceToken.length === 64) {
            if (isDevelopment) {
                arn = `app/APNS_SANDBOX/${platfomApplication}`;
            }
            else {
                arn = `app/APNS/${platfomApplication}`;
            }
        }
        else {
            arn = `app/GCM/${platfomApplication}`;
        }
        return helpers_1.Helpers.getTopicARNByName(arn);
    }
}
exports.SNSService = SNSService;
